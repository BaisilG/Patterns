namespace Patterns

open System
open Stringier
open Stringier.Patterns
open Defender
open Xunit

type CheckerTests() =
    inherit Trial()

    [<Fact>]
    let ``StringChecker consume`` () =
        //! This is a sophisticated, therefore fragile, pattern type. It needs to be exhaustively tested against a very large battery. Do not remove these no matter how redundant they may seem, for they are not.
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), true,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '-' || char = '_'), true,
                      (fun (char:char) -> char.IsLetterOrDigit()), true)
        |> fails "a"
        |> fails "a "
        |> fails "aa"
        |> fails "aa "
        |> fails "_a"
        |> fails "_a "
        |> fails "a_"
        |> fails "a_ "
        |> fails "1b"
        |> fails "1b "
        |> fails "a2"
        |> fails "a2 "
        |> fails "12"
        |> fails "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> fails "ab_"
        |> fails "ab_ "
        |> fails "-bc"
        |> fails "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> fails "ab-"
        |> fails "ab- "
        |> fails "1bc"
        |> fails "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> fails "123"
        |> fails "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore

        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), false,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), true,
                      (fun (char:char) -> char.IsLetterOrDigit()), true)
        |> fails "a"
        |> fails "a "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> fails "a_"
        |> fails "a_ "
        |> consumes "1b" "1b"
        |> consumes "1b" "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> consumes "12" "12"
        |> consumes "12" "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> fails "ab_"
        |> fails "ab_ "
        |> consumes "-bc" "-bc"
        |> consumes "-bc" "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> fails "ab-"
        |> fails "ab- "
        |> consumes "1bc" "1bc"
        |> consumes "1bc" "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> consumes "123" "123"
        |> consumes "123" "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), true,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), false,
                      (fun (char:char) -> char.IsLetterOrDigit()), true)
        |> fails "a"
        |> fails "a "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> fails "a_"
        |> fails "a_ "
        |> fails "1b"
        |> fails "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> fails "12"
        |> fails "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> fails "ab_"
        |> fails "ab_ "
        |> fails "-bc"
        |> fails "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> fails "ab-"
        |> fails "ab- "
        |> fails "1bc"
        |> fails "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> fails "123"
        |> fails "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), true,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), true,
                      (fun (char:char) -> char.IsLetterOrDigit()), false)
        |> fails "a"
        |> fails "a "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> consumes "a_" "a_"
        |> consumes "a_" "a_ "
        |> fails "1b"
        |> fails "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> fails "12"
        |> fails "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> consumes "ab_" "ab_"
        |> consumes "ab_" "ab_ "
        |> fails "-bc"
        |> fails "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> consumes "ab-" "ab-"
        |> consumes "ab-" "ab- "
        |> fails "1bc"
        |> fails "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> fails "123"
        |> fails "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), false,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), false,
                      (fun (char:char) -> char.IsLetterOrDigit()), true)
        |> consumes "a" "a"
        |> consumes "a" "a "
        |> consumes "1" "1"
        |> consumes "1" "1 "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> fails "a_"
        |> fails "a_ "
        |> consumes "1b" "1b"
        |> consumes "1b" "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> consumes "12" "12"
        |> consumes "12" "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> fails "ab_"
        |> fails "ab_ "
        |> consumes "-bc" "-bc"
        |> consumes "-bc" "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> fails "ab-"
        |> fails "ab- "
        |> consumes "1bc" "1bc"
        |> consumes "1bc" "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> consumes "123" "123"
        |> consumes "123" "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), false,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), true,
                      (fun (char:char) -> char.IsLetterOrDigit()), false)
        |> consumes "a" "a"
        |> consumes "a" "a "
        |> consumes "1" "1"
        |> consumes "1" "1 "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> consumes "a_" "a_"
        |> consumes "a_" "a_ "
        |> consumes "1b" "1b"
        |> consumes "1b" "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> consumes "12" "12"
        |> consumes "12" "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> consumes "ab_" "ab_"
        |> consumes "ab_" "ab_ "
        |> consumes "-bc" "-bc"
        |> consumes "-bc" "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> consumes "ab-" "ab-"
        |> consumes "ab-" "ab- "
        |> consumes "1bc" "1bc"
        |> consumes "1bc" "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> consumes "123" "123"
        |> consumes "123" "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), true,
                      (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), false,
                      (fun (char:char) -> char.IsLetterOrDigit()), false)
        |> consumes "a" "a"
        |> consumes "a" "a "
        |> fails "1"
        |> fails "1 "
        |> consumes "aa" "aa"
        |> consumes "aa" "aa "
        |> consumes "_a" "_a"
        |> consumes "_a" "_a "
        |> consumes "a_" "a_"
        |> consumes "a_" "a_ "
        |> fails "1b"
        |> fails "1b "
        |> consumes "a2" "a2"
        |> consumes "a2" "a2 "
        |> fails "12"
        |> fails "12 "
        |> consumes "abc" "abc"
        |> consumes "abc" "abc "
        |> consumes "_bc" "_bc"
        |> consumes "_bc" "_bc "
        |> consumes "a_c" "a_c"
        |> consumes "a_c" "a_c "
        |> consumes "ab_" "ab_"
        |> consumes "ab_" "ab_ "
        |> fails "-bc"
        |> fails "-bc "
        |> consumes "a-c" "a-c"
        |> consumes "a-c" "a-c "
        |> consumes "ab-" "ab-"
        |> consumes "ab-" "ab- "
        |> fails "1bc"
        |> fails "1bc "
        |> consumes "a2c" "a2c"
        |> consumes "a2c" "a2c "
        |> consumes "ab3" "ab3"
        |> consumes "ab3" "ab3 "
        |> consumes "a23" "a23"
        |> consumes "a23" "a23 "
        |> fails "123"
        |> fails "123 "
        |> consumes "a_cde" "a_cde"
        |> consumes "a_cde" "a_cde "
        |> consumes "ab_de" "ab_de"
        |> consumes "ab_de" "ab_de "
        |> consumes "abc_e" "abc_e"
        |> consumes "abc_e" "abc_e "
        |> consumes "a__de" "a__de"
        |> consumes "a__de" "a__de "
        |> consumes "ab__e" "ab__e"
        |> consumes "ab__e" "ab__e "
        |> consumes "a_c_e" "a_c_e"
        |> consumes "a_c_e" "a_c_e "
        |> consumes "a___e" "a___e"
        |> consumes "a___e" "a___e "
        |> ignore
        
        Assert.Throws<PatternConstructionException>(Action (fun () -> Pattern.Check((fun (char:char) -> char.IsLetter() || char = '_'), false,
                                                                                    (fun (char:char) -> char.IsLetterOrDigit() || char = '_' || char = '-'), false,
                                                                                    (fun (char:char) -> char.IsLetterOrDigit()), false) |> ignore))
        
    [<Fact>]
    member _.``WordChecker consume`` () =
        Pattern.Check(Bias.Head,
                     (fun (char:char) -> char = '_'),
                     (fun (char:char) -> char.IsLetter()),
                     (fun (char:char) -> char.IsLetterOrDigit()))
        |> consumes "_" "_"
        |> consumes "_" "_ "
        |> fails "b"
        |> fails "b "
        |> fails "3"
        |> fails "3 "
        |> consumes "_3" "_3"
        |> consumes "_3" "_3 "
        |> consumes "_b3" "_b3"
        |> consumes "_b3" "_b3 "
        |> consumes "_example" "_example"
        |> consumes "_example" "_example "
        |> consumes "_example3" "_example3"
        |> consumes "_example3" "_example3 "
        |> consumes "_example" "_example_"
        |> consumes "_example" "_example_ "
        |> ignore
        
        Pattern.Check(Bias.Tail,
                     (fun (char:char) -> char = '_'),
                     (fun (char:char) -> char.IsLetter()),
                     (fun (char:char) -> char.IsLetterOrDigit()))
        |> fails "_"
        |> fails "_ "
        |> consumes "b" "b"
        |> consumes "b" "b "
        |> consumes "3" "3"
        |> consumes "3" "3 "
        |> consumes "_3" "_3"
        |> consumes "_3" "_3 "
        |> consumes "_b3" "_b3"
        |> consumes "_b3" "_b3 "
        |> consumes "_example" "_example"
        |> consumes "_example" "_example "
        |> consumes "_example3" "_example3"
        |> consumes "_example3" "_example3 "
        |> consumes "_example" "_example_"
        |> consumes "_example" "_example_ "
        |> ignore
