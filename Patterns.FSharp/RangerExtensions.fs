namespace Stringier.Patterns

open System

[<AutoOpen>]
module RangerExtensions =

    type Binder =
        static member Range(left:Pattern, right:Pattern) = Pattern.Range(left, right)
        static member Range(left:Pattern, right:String) = Pattern.Range(left, p right)
        static member Range(left:String, right:Pattern) = Pattern.Range(p left, right)
        static member Range(left:String, right:String) = Pattern.Range(p left, p right)
        static member Range(left:Pattern, right:Char) = Pattern.Range(left, p right)
        static member Range(left:Char, right:Pattern) = Pattern.Range(p left, right)
        static member Range(left:Char, right:Char) = Pattern.Range(p left, p right)
        static member Range(left:Char, right:String) = Pattern.Range(p left, p right)
        static member Range(left:String, right:Char) = Pattern.Range(p left, p right)
        static member Range(left:Capture ref, right:Capture ref) = Pattern.Range(p left, p right)
        static member Range(left:Pattern, right:Capture ref) = Pattern.Range(left, p right)
        static member Range(left:Capture ref, right:Pattern) = Pattern.Range(p left, right)
        static member Range(left:String, right:Capture ref) = Pattern.Range(p left, p right)
        static member Range(left:Capture ref, right:String) = Pattern.Range(p left, p right)
        static member Range(left:Char, right:Capture ref) = Pattern.Range(p left, p right)
        static member Range(left:Capture ref, right:Char) = Pattern.Range(p left, p right)

        static member ERange(left:Pattern, right:Pattern, escape:Pattern) = Pattern.Range(left, right, escape)
        static member ERange(left:Pattern, right:Pattern, escape:String) = Pattern.Range(left, right, p escape)
        static member ERange(left:Pattern, right:Pattern, escape:Char) = Pattern.Range(left, right, p escape)
        static member ERange(left:Pattern, right:Pattern, escape:Capture ref) = Pattern.Range(left, right, p escape)
        static member ERange(left:Pattern, right:String, escape:Pattern) = Pattern.Range(left, p right, escape)
        static member ERange(left:Pattern, right:String, escape:String) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:String, escape:Char) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:String, escape:Capture ref) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Char, escape:Pattern) = Pattern.Range(left, p right, escape)
        static member ERange(left:Pattern, right:Char, escape:String) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Char, escape:Char) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Char, escape:Capture ref) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Capture ref, escape:Pattern) = Pattern.Range(left, p right, escape)
        static member ERange(left:Pattern, right:Capture ref, escape:String) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Capture ref, escape:Char) = Pattern.Range(left, p right, p escape)
        static member ERange(left:Pattern, right:Capture ref, escape:Capture ref) = Pattern.Range(left, p right, p escape)
        static member ERange(left:String, right:Pattern, escape:Pattern) = Pattern.Range(p left, right, escape)
        static member ERange(left:String, right:Pattern, escape:String) = Pattern.Range(p left, right, p escape)
        static member ERange(left:String, right:Pattern, escape:Char) = Pattern.Range(p left, right, p escape)
        static member ERange(left:String, right:Pattern, escape:Capture ref) = Pattern.Range(p left, right, p escape)
        static member ERange(left:String, right:String, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:String, right:String, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:String, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:String, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Char, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:String, right:Char, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Char, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Char, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Capture ref, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:String, right:Capture ref, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Capture ref, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:String, right:Capture ref, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Pattern, escape:Pattern) = Pattern.Range(p left, right, escape)
        static member ERange(left:Char, right:Pattern, escape:String) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Char, right:Pattern, escape:Char) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Char, right:Pattern, escape:Capture ref) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Char, right:String, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Char, right:String, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:String, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:String, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Char, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Char, right:Char, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Char, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Char, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Capture ref, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Char, right:Capture ref, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Capture ref, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Char, right:Capture ref, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Pattern, escape:Pattern) = Pattern.Range(p left, right, escape)
        static member ERange(left:Capture ref, right:Pattern, escape:String) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Capture ref, right:Pattern, escape:Char) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Capture ref, right:Pattern, escape:Capture ref) = Pattern.Range(p left, right, p escape)
        static member ERange(left:Capture ref, right:String, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Capture ref, right:String, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:String, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:String, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Char, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Capture ref, right:Char, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Char, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Char, escape:Capture ref) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Capture ref, escape:Pattern) = Pattern.Range(p left, p right, escape)
        static member ERange(left:Capture ref, right:Capture ref, escape:String) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Capture ref, escape:Char) = Pattern.Range(p left, p right, p escape)
        static member ERange(left:Capture ref, right:Capture ref, escape:Capture ref) = Pattern.Range(p left, p right, p escape)

        static member NRange(left:Pattern, right:Pattern) = Pattern.NestedRange(left, right)
        static member NRange(left:Pattern, right:String) = Pattern.NestedRange(left, p right)
        static member NRange(left:String, right:Pattern) = Pattern.NestedRange(p left, right)
        static member NRange(left:String, right:String) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Pattern, right:Char) = Pattern.NestedRange(left, p right)
        static member NRange(left:Char, right:Pattern) = Pattern.NestedRange(p left, right)
        static member NRange(left:Char, right:Char) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Char, right:String) = Pattern.NestedRange(p left, p right)
        static member NRange(left:String, right:Char) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Capture ref, right:Capture ref) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Pattern, right:Capture ref) = Pattern.NestedRange(left, p right)
        static member NRange(left:Capture ref, right:Pattern) = Pattern.NestedRange(p left, right)
        static member NRange(left:String, right:Capture ref) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Capture ref, right:String) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Char, right:Capture ref) = Pattern.NestedRange(p left, p right)
        static member NRange(left:Capture ref, right:Char) = Pattern.NestedRange(p left, p right)

    let inline private _range< ^t, ^a, ^b, ^c when (^t or ^a) : (static member  Range : ^a * ^b -> ^c)> left right = ((^t or ^a) : (static member  Range : ^a * ^b -> ^c)(left, right))

    let inline private _erange< ^t, ^a, ^b, ^c, ^d when (^t or ^a) : (static member ERange : ^a * ^b * ^c -> ^d)> left right escape =
        ((^t or ^a) : (static member ERange : ^a * ^b * ^c -> ^d)(left, right, escape))

    let inline private _nrange< ^t, ^a, ^b, ^c when (^t or ^a) : (static member NRange : ^a * ^b -> ^c)> left right =
        ((^t or ^a) : (static member NRange : ^a * ^b -> ^c)(left, right))

    let inline range start stop = _range<Binder, _, _, Pattern> start stop

    let inline erange start stop escape = _erange<Binder, _, _, _, Pattern> start stop escape

    let inline nrange start stop = _nrange<Binder, _, _, Pattern> start stop